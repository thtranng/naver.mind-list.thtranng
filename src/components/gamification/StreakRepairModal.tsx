import React, { useState, useEffect } from 'react';
import { Heart, AlertTriangle, Clock, Gem } from 'lucide-react';
import { useApp } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { toast } from 'sonner';
import { StreakProtectionService } from '@/services/streakProtectionService';

interface StreakRepairModalProps {
  isOpen: boolean;
  onClose: () => void;
  previousStreak: number;
}

export const StreakRepairModal: React.FC<StreakRepairModalProps> = ({
  isOpen,
  onClose,
  previousStreak
}) => {
  const { state, dispatch } = useApp();
  const [timeLeft, setTimeLeft] = useState<number>(0);
  const [isProcessing, setIsProcessing] = useState(false);

  // L·∫•y th√¥ng tin ∆∞u ƒë√£i s·ª≠a ch·ªØa
  const repairOffer = StreakProtectionService.getStreakRepairOffer(previousStreak);

  useEffect(() => {
    if (!isOpen || !repairOffer) return;

    // T√≠nh th·ªùi gian c√≤n l·∫°i (48 gi·ªù t·ª´ khi chu·ªói b·ªã ƒë·ª©t)
    const updateTimeLeft = () => {
      const now = Date.now();
      const remaining = repairOffer.expiresAt - now;
      setTimeLeft(Math.max(0, remaining));
    };

    updateTimeLeft();
    const interval = setInterval(updateTimeLeft, 1000);

    return () => clearInterval(interval);
  }, [isOpen, repairOffer]);

  const formatTimeLeft = (ms: number): string => {
    const hours = Math.floor(ms / (1000 * 60 * 60));
    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((ms % (1000 * 60)) / 1000);
    return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };

  const handleRepairStreak = async () => {
    if (!repairOffer || state.gamification.mindGems < repairOffer.cost) {
      toast.error('Kh√¥ng ƒë·ªß Mind Gems ƒë·ªÉ s·ª≠a ch·ªØa chu·ªói ng√†y!');
      return;
    }

    setIsProcessing(true);
    
    try {
      // S·ª≠ d·ª•ng service ƒë·ªÉ s·ª≠a ch·ªØa chu·ªói
      const result = StreakProtectionService.repairStreak(previousStreak, repairOffer.cost);
      
      if (result.success) {
        // Dispatch action ƒë·ªÉ c·∫≠p nh·∫≠t state
        dispatch({
          type: 'REPAIR_STREAK',
          payload: undefined
        });
        
        toast.success(`üéâ Chu·ªói ng√†y ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng! Chu·ªói hi·ªán t·∫°i: ${result.restoredStreak} ng√†y`);
        onClose();
      } else {
        toast.error(result.message || 'C√≥ l·ªói x·∫£y ra khi s·ª≠a ch·ªØa chu·ªói ng√†y!');
      }
    } catch (error) {
      toast.error('C√≥ l·ªói x·∫£y ra khi s·ª≠a ch·ªØa chu·ªói ng√†y!');
    } finally {
      setIsProcessing(false);
    }
  };

  if (!repairOffer || timeLeft <= 0) {
    return null;
  }

  const canAfford = state.gamification.mindGems >= repairOffer.cost;
  const progressPercentage = ((48 * 60 * 60 * 1000 - timeLeft) / (48 * 60 * 60 * 1000)) * 100;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-600">
            <AlertTriangle className="w-5 h-5" />
            √îi kh√¥ng! Chu·ªói ng√†y b·ªã ƒë·ª©t
          </DialogTitle>
          <DialogDescription>
            Chu·ªói {previousStreak} ng√†y c·ªßa b·∫°n ƒë√£ b·ªã ng·∫Øt. ƒê√¢y l√† c∆° h·ªôi duy nh·∫•t ƒë·ªÉ kh√¥i ph·ª•c!
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Th√¥ng tin ∆∞u ƒë√£i */}
          <div className="p-4 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg border border-red-200">
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium text-red-900 flex items-center gap-2">
                <Heart className="w-4 h-4" />
                ∆Øu ƒë√£i S·ª≠a Ch·ªØa ƒê·∫∑c bi·ªát
              </h4>
              <Badge variant="destructive" className="text-xs">
                Ch·ªâ 1 l·∫ßn
              </Badge>
            </div>
            <div className="text-sm text-red-700 space-y-1">
              <div className="flex justify-between">
                <span>Chu·ªói ng√†y b·ªã m·∫•t:</span>
                <span className="font-medium">{previousStreak} ng√†y</span>
              </div>
              <div className="flex justify-between">
                <span>Chi ph√≠ kh√¥i ph·ª•c:</span>
                <span className="font-medium flex items-center gap-1">
                  {repairOffer.cost} <Gem className="w-3 h-3" />
                </span>
              </div>
              <div className="flex justify-between">
                <span>Mind Gems hi·ªán c√≥:</span>
                <span className={`font-medium ${canAfford ? 'text-green-600' : 'text-red-600'}`}>
                  {state.gamification.mindGems} <Gem className="w-3 h-3 inline" />
                </span>
              </div>
            </div>
          </div>

          {/* Th·ªùi gian c√≤n l·∫°i */}
          <div className="p-3 bg-yellow-50 rounded-lg border border-yellow-200">
            <div className="flex items-center gap-2 mb-2">
              <Clock className="w-4 h-4 text-yellow-600" />
              <span className="text-sm font-medium text-yellow-800">
                Th·ªùi gian c√≤n l·∫°i: {formatTimeLeft(timeLeft)}
              </span>
            </div>
            <Progress value={progressPercentage} className="h-2" />
            <p className="text-xs text-yellow-700 mt-1">
              ∆Øu ƒë√£i n√†y s·∫Ω h·∫øt h·∫°n sau 48 gi·ªù k·ªÉ t·ª´ khi chu·ªói b·ªã ƒë·ª©t
            </p>
          </div>

          {/* L·ª£i √≠ch c·ªßa vi·ªác s·ª≠a ch·ªØa */}
          <div className="p-3 bg-green-50 rounded-lg border border-green-200">
            <h4 className="text-sm font-medium text-green-900 mb-2">‚ú® L·ª£i √≠ch khi kh√¥i ph·ª•c:</h4>
            <ul className="text-xs text-green-700 space-y-1">
              <li>‚Ä¢ Gi·ªØ l·∫°i to√†n b·ªô {previousStreak} ng√†y ƒë√£ n·ªó l·ª±c</li>
              <li>‚Ä¢ Ti·∫øp t·ª•c h√†nh tr√¨nh kh√¥ng b·ªã gi√°n ƒëo·∫°n</li>
              <li>‚Ä¢ Duy tr√¨ ƒë·ªông l·ª±c v√† th√≥i quen t√≠ch c·ª±c</li>
              <li>‚Ä¢ Tr√°nh ph·∫£i b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu</li>
            </ul>
          </div>

          {/* Buttons */}
          <div className="flex gap-2 pt-2">
            <Button 
              variant="outline" 
              onClick={onClose}
              className="flex-1"
              disabled={isProcessing}
            >
              B·ªè qua
            </Button>
            <Button 
              onClick={handleRepairStreak}
              disabled={!canAfford || isProcessing}
              className="flex-1 bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600"
            >
              {isProcessing ? (
                'ƒêang x·ª≠ l√Ω...'
              ) : (
                `Kh√¥i ph·ª•c (${repairOffer.cost} üíé)`
              )}
            </Button>
          </div>

          {!canAfford && (
            <p className="text-xs text-red-600 text-center">
              B·∫°n c·∫ßn th√™m {repairOffer.cost - state.gamification.mindGems} Mind Gems ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y
            </p>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};